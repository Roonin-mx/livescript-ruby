require 'minitest/autorun'
require 'execjs'
require 'livescript'

class LiveScriptSourceTest < Minitest::Test
  def setup
    # source => expected compiled result
    @source_codes = {
      %Q{alert 'hi'} => %Q{alert('hi')},
      %Q{add 1, 2}   => %Q{add(1, 2)},
      %Q{(x, y) -> x + y} => %Q{function(x, y)}
    }
  end

  def test_compile
    @source_codes.each do |source, result|
      assert_match result, LiveScript.compile(source)
    end
  end

  def test_compile_with_io
    @source_codes.each do |source, result|
      assert_match result, LiveScript.compile(StringIO.new(source))
    end
  end

  def test_compile_errors
    code = <<-CODE
      sayHello = ->
        console.log 'hello, world'
        if
    CODE

    assert_raises do
      LiveScript.compile(code)
    end
  end

  def test_default_options
    assert_empty LiveScript.default_options
    assert_match 'Generated by LiveScript', LiveScript.compile("alert 'hi'")
    assert_match '(function()', LiveScript.compile("alert 'hi'")

    LiveScript.default_options = {bare: true, header: false}
    refute_match 'Generated by LiveScript', LiveScript.compile("alert 'hi'")
    refute_match '(function()', LiveScript.compile("alert 'hi'")

    # override default options
    assert_match '(function()', LiveScript.compile("alert 'hi'", bare: false)
    assert_match 'Generated by LiveScript', LiveScript.compile("alert 'hi'", header: true)

    # avoid affecting other tests
    LiveScript.default_options = {}
  end

  def test_options
    # bare
    assert_match '(function()', LiveScript.compile("alert 'hi'", bare: false)
    refute_match '(function()', LiveScript.compile("alert 'hi'", bare: true)

    # header
    assert_match 'Generated by LiveScript', LiveScript.compile("alert 'hi'", header: true)
    refute_match 'Generated by LiveScript', LiveScript.compile("alert 'hi'", header: false)
  end
end
